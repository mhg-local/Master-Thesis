<!-- $Id: generic_flystick_data_newcave.xml 44405 2014-09-23 13:11:52Z sp841227 $ -->
<!--
	Generic base for receiving data from flystick2. Not working in itself - choose what you need,
	and pipe data whereever you need it.
-->
<module>
	<nodespace>
	</nodespace>
	<graph>
		<!-- driver -->
		<node name="flystick_source" type="DriverSensor">
			<param name="sensor_index" value="0"/>
			<param name="type" value="STICK2"/>
			<param name="driver" value="DTRACK"/>
		</node>

		<node name="flystick" type="HistoryProject">
			<param name="project">POSITION, ORIENTATION, DSCALAR, BUTTONS, CONTROLLER, QUALITY</param>
		</node>
		
		<!-- quality check - only forward pos and ori if quality is good enough -->
		<node name="quality_threshold" type="Threshold[double]">
			<param name="threshold" value="0.1"/>
			<param name="mode" value="output_zero"/>
		</node>
		<node name="quality_to_bool" type="TypeConvert[double,bool]"/>
		<node name="quality_check" type="ConditionalRoute" />

		<!-- tracker conversion -->
		<!-- offset in millimeters, because it is applied before scaling the pos -->
		<node name="to_dtrack_origin" type="ConstantValue[VistaVector3D]">
			<param name="value" value="0,0,0"/>
		</node>
		<node name="offset_rotate" type="Transform[VistaQuaternion,VistaVector3D]"/>
		<node name="translate_pos" type="Add[VistaVector3D]"/>
		<node name="scale_mm_to_m" type="ConstantValue[float]">
			<param name="value" value="0.001"/>
		</node>
		<node name="local_position" type="Multiply[float,VistaVector3D]"/>
		
		<node name="to_world_transform" type="GetTransform">
			<param name="object" value="CAM:MAIN"/>
		</node>
		<node name="world_orientation" type="Transform[VistaTransformMatrix,VistaQuaternion]"/>
		<node name="world_position" type="Transform[VistaTransformMatrix,VistaVector3D]"/>


		<!-- controller-to-button conversion -->
		<node name="rangecheck_xaxis_up" type="RangeCheck[float]" >
			<param name="min" value="0.3" />
			<param name="max" value="1.0" />
		</node>
		<node name="rangecheck_xaxis_down" type="RangeCheck[float]" >
			<param name="min" value="-1.0" />
			<param name="max" value="-0.3" />
		</node>
		<node name="rangecheck_yaxis_up" type="RangeCheck[float]" >
			<param name="min" value="0.3" />
			<param name="max" value="1.0" />
		</node>
		<node name="rangecheck_yaxis_down" type="RangeCheck[float]" >
			<param name="min" value="-1.0" />
			<param name="max" value="-0.3" />
		</node>
		
		<!-- ChangeDetect nodes to avoid piping values through without necessity -->
		<node name="cd_button_trigger" type="ChangeDetect[bool]" />
		<node name="cd_button_outer_left" type="ChangeDetect[bool]" />
		<node name="cd_button_inner_left" type="ChangeDetect[bool]" />
		<node name="cd_button_inner_right" type="ChangeDetect[bool]" />
		<node name="cd_button_outer_right" type="ChangeDetect[bool]" />
		<node name="cd_button_coolie_hat" type="ChangeDetect[bool]" />
		<node name="cd_button_up" type="ChangeDetect[bool]" />
		<node name="cd_button_down" type="ChangeDetect[bool]" />
		<node name="cd_button_left" type="ChangeDetect[bool]" />
		<node name="cd_button_right" type="ChangeDetect[bool]" />
		<node name="cd_axis_x" type="ChangeDetect[float]" />
		<node name="cd_axis_y" type="ChangeDetect[float]" />
		
		<!-- proximity warning node to indicate when one gets too close to walls -->
		<!-- note: check for duplicates with other flystick ProximityWarning in other xml's -->
		<node name="proximity" type="ProximityWarning">
			<param name="box_min" value="-2.625,  0, -2.625"/>
			<param name="box_max" value=" 2.625, 10,  2.625"/>
			<param name="safe_distance" value="0.75"/>
			<param name="danger_distance" value="0.3"/>
			<param name="type" value="sign"/>			
			<param name="size" value="0.0"/>
		</node>
		
		<!-- panic trigger - if all four lower buttons are pressed simultaneously, fade out the scenery -->
		<node name="bool_1_and_4" type="And[bool]"/>
		<node name="bool_14_and_0" type="And[bool]"/>
		<node name="panic_toggle" type="Toggle">
			<param name="mode" value="on_change_to_true"/>
		</node>
		<node name="panic_fadeout" type="Fadeout">
			<param name="color" value="GRAY"/>
			<param name="fadeout_time" value="0.1"/>
			<param name="fadein_time" value="2.0"/>
		</node>
		
		<node name="application_context_node" type="application_context">
			<param name="object" value="application_context_object"/>
		</node>
				
		<node name="PrimarySelect" type="WidgetsInputSlotSink[bool]">
			<param name="virtual_device" 	value="PrimaryPointer"/>
			<param name="input_slot"		value="Select"/>
		</node>
		
		<node name="PrimaryPose"	type="WidgetsInputSlotSink[VistaTransformMatrix]">
			<param name="virtual_device" 	value="PrimaryPointer"/>
			<param name="input_slot"		value="Pose"/>
		</node>
		
		<node name="PoseComposer"	type="MatrixCompose"/>
		
	</graph>
	<edges>
		<edge fromnode="flystick_source" tonode="flystick" fromport="history" toport="history" />
		
		<!-- quality check -->
		<edge fromnode="flystick" tonode="quality_threshold" fromport="QUALITY" toport="in" />
		<edge fromnode="quality_threshold" tonode="quality_to_bool" fromport="out" toport="in" />
		<edge fromnode="quality_to_bool" tonode="quality_check" fromport="out" toport="trigger" />
		<edge fromnode="flystick" tonode="quality_check" fromport="POSITION" toport="position" />
		<edge fromnode="flystick" tonode="quality_check" fromport="ORIENTATION" toport="orientation" />
		
		<!-- conversion of position and orientation -->
		<edge fromnode="quality_check" tonode="offset_rotate" fromport="orientation" toport="first"/>
		<edge fromnode="to_dtrack_origin" tonode="offset_rotate" fromport="value" toport="second"/>
		<edge fromnode="quality_check" tonode="translate_pos" fromport="position" toport="first"/>
		<edge fromnode="offset_rotate" tonode="translate_pos" fromport="out" toport="second"/>
		<edge fromnode="translate_pos" tonode="local_position" fromport="out" toport="second"/>
		<edge fromnode="scale_mm_to_m" tonode="local_position" fromport="value" toport="first"/>
		
		<edge fromnode="to_world_transform" tonode="world_orientation" fromport="transform" toport="first"/>
		<edge fromnode="quality_check" tonode="world_orientation" fromport="orientation" toport="second"/>
		<edge fromnode="to_world_transform" tonode="world_position" fromport="transform" toport="first"/>
		<edge fromnode="local_position" tonode="world_position" fromport="out" toport="second"/>
				
		<!-- panic fadeout -->
		<edge fromnode="flystick" tonode="bool_1_and_4" fromport="BUTTONS_1" toport="first" />
		<edge fromnode="flystick" tonode="bool_1_and_4" fromport="BUTTONS_4" toport="second" />
		<edge fromnode="bool_1_and_4" tonode="bool_14_and_0" fromport="out" toport="first" />
		<edge fromnode="flystick" tonode="bool_14_and_0" fromport="BUTTONS_0" toport="second" />
		<edge fromnode="bool_14_and_0" tonode="panic_toggle" fromport="out" toport="toggle" />
		<edge fromnode="panic_toggle" tonode="panic_fadeout" fromport="out" toport="state" />

		<!-- conversion controller -> buttons -->
		<edge fromnode="flystick" tonode="rangecheck_xaxis_up" fromport="CONTROLLER_1" toport="in" />
		<edge fromnode="flystick" tonode="rangecheck_xaxis_down" fromport="CONTROLLER_1" toport="in" />
		<edge fromnode="flystick" tonode="rangecheck_yaxis_up" fromport="CONTROLLER_0" toport="in" />
		<edge fromnode="flystick" tonode="rangecheck_yaxis_down" fromport="CONTROLLER_0" toport="in" />
		
		<!-- button and axes change detects -->
		<!-- front button (index finger) -->
		<edge fromnode="flystick" tonode="cd_button_trigger" fromport="BUTTONS_0" toport="in" />
		<!-- four semi-circle thumb buttons - not thy go from RIGHT to LEFT! -->
		<edge fromnode="flystick" tonode="cd_button_outer_right" fromport="BUTTONS_1" toport="in" /> <!-- right-most -->
		<edge fromnode="flystick" tonode="cd_button_inner_right" fromport="BUTTONS_2" toport="in" /> <!-- right center -->
		<edge fromnode="flystick" tonode="cd_button_inner_left" fromport="BUTTONS_3" toport="in" /> <!-- left center -->
		<edge fromnode="flystick" tonode="cd_button_outer_left" fromport="BUTTONS_4" toport="in" /> <!-- left-most -->
		<!-- coolie hat button -->
		<edge fromnode="flystick" tonode="cd_button_coolie_hat" fromport="BUTTONS_5" toport="in" />		
		<!-- artificial buttons from coolie hat -->
		<edge fromnode="rangecheck_xaxis_up" tonode="cd_button_up" fromport="in_range" toport="in" />
		<edge fromnode="rangecheck_xaxis_down" tonode="cd_button_down" fromport="in_range" toport="in" />
		<edge fromnode="rangecheck_yaxis_up" tonode="cd_button_right" fromport="in_range" toport="in" />
		<edge fromnode="rangecheck_yaxis_down" tonode="cd_button_left" fromport="in_range" toport="in" />
		<!-- axes -->
		<edge fromnode="flystick" tonode="cd_axis_x" fromport="CONTROLLER_0" toport="in" />
		<edge fromnode="flystick" tonode="cd_axis_y" fromport="CONTROLLER_1" toport="in" />
		

		<!-- proximity warning -->
		<edge fromnode="local_position" tonode="proximity" fromport="out" toport="user_position" />
		
		<!-- these are the available outputs, currently routed to text output
		  -- TODO redirect them to your application sink, or delete them if not needed.
		  -->
	
		<!--
		<edge fromnode="cd_button_trigger" tonode="text" fromport="out" toport="cd_button_trigger" />
		<edge fromnode="cd_button_outer_left" tonode="text" fromport="out" toport="cd_button_outer_left" />
		<edge fromnode="cd_button_inner_left" tonode="text" fromport="out" toport="cd_button_inner_left" />
		<edge fromnode="cd_button_inner_right" tonode="text" fromport="out" toport="cd_button_inner_right" />
		<edge fromnode="cd_button_outer_right" tonode="text" fromport="out" toport="cd_button_outer_right" />
		<edge fromnode="cd_button_coolie_hat" tonode="text" fromport="out" toport="cd_button_coolie_hat" />
		-->
		
		<!-- artificial buttons from coolie hat -->
		<!--
		<edge fromnode="cd_button_up" tonode="text" fromport="out" toport="cd_button_up" />
		<edge fromnode="cd_button_down" tonode="text" fromport="out" toport="cd_button_down" />
		<edge fromnode="cd_button_right" tonode="text" fromport="out" toport="cd_button_right" />
		<edge fromnode="cd_button_left" tonode="text" fromport="out" toport="cd_button_left" />
		-->
		
		<!-- coolie hat axes -->
		<!--
		<edge fromnode="cd_axis_x" tonode="text" fromport="out" toport="cd_axis_x" />
		<edge fromnode="cd_axis_y" tonode="text" fromport="out" toport="cd_axis_y" />
		-->
		
		<!-- pos and ori -->
		<!--
		<edge fromnode="world_position" tonode="text" fromport="out" toport="world_position" />
		<edge fromnode="world_orientation" tonode="text" fromport="out" toport="world_orientation" />
		<edge fromnode="local_position" tonode="text" fromport="out" toport="local_position" />
		<edge fromnode="quality_check" tonode="text" fromport="orientation" toport="local_orientation" />
		-->
				
		<edge fromnode="world_position"		tonode="application_context_node"	fromport="out"	toport="pointer_pos"/>
		<edge fromnode="world_orientation"	tonode="application_context_node"	fromport="out"	toport="pointer_ori"/>
		<edge fromnode="world_position"		tonode="application_context_node"	fromport="out"	toport="cursor_pos"/>
		<edge fromnode="world_orientation"	tonode="application_context_node"	fromport="out"	toport="cursor_ori"/>
		
		<edge fromnode="world_orientation" tonode="PoseComposer" fromport="out" toport="orientation"/>
		<edge fromnode="world_position" tonode="PoseComposer" fromport="out" toport="translation"/>
		
		<edge fromnode="PoseComposer" tonode="PrimaryPose" fromport="out" toport="value"/>		
		<edge fromnode="cd_button_trigger" tonode="PrimarySelect" fromport="out" toport="value"/>
	</edges>
</module>
